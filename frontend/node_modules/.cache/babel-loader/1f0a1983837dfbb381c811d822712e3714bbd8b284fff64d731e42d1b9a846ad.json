{"ast":null,"code":"var _jsxFileName = \"/Users/ivanmerkulov/Documents/GitHub/2109415-what-to-watch-3/frontend/src/components/genres-list/genres-list.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useMemo } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { useAppSelector, useAppDispatch } from '../../hooks/';\nimport { setActiveGenre } from '../../store/genre-data/genre-data';\nimport { getActiveGenre } from '../../store/genre-data/selectors';\nimport { DEFAULT_GENRE, GENRES } from '../../const';\nimport { capitalize } from '../../util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GenresList() {\n  _s();\n  const dispatch = useAppDispatch();\n  const activeGenre = useAppSelector(getActiveGenre);\n  const genres = useMemo(() => [DEFAULT_GENRE, ...GENRES], []);\n  const [searchParams] = useSearchParams();\n  const searchGenre = searchParams.get('genre');\n  useEffect(() => {\n    const loweredSearchGenre = searchGenre === null || searchGenre === void 0 ? void 0 : searchGenre.toLowerCase();\n    if (loweredSearchGenre === activeGenre.toLowerCase()) {\n      return;\n    }\n    if (loweredSearchGenre && genres.includes(loweredSearchGenre)) {\n      dispatch(setActiveGenre(loweredSearchGenre));\n      return;\n    }\n    dispatch(setActiveGenre(DEFAULT_GENRE));\n  }, [searchGenre, dispatch, genres, activeGenre]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"catalog__genres-list\",\n    children: genres.slice(0, 10).map(genre => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: cn('catalog__genres-item', {\n        'catalog__genres-item--active': genre === activeGenre\n      }),\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: `?genre=${genre}`,\n        className: \"catalog__genres-link\",\n        children: capitalize(genre)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)\n    }, genre, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(GenresList, \"aDknQVyt65SdJ8NMlGXDAJTfyMY=\", false, function () {\n  return [useAppDispatch, useAppSelector, useSearchParams];\n});\n_c = GenresList;\nexport default GenresList;\nvar _c;\n$RefreshReg$(_c, \"GenresList\");","map":{"version":3,"names":["useEffect","useMemo","Link","useSearchParams","cn","useAppSelector","useAppDispatch","setActiveGenre","getActiveGenre","DEFAULT_GENRE","GENRES","capitalize","GenresList","dispatch","activeGenre","genres","searchParams","searchGenre","get","loweredSearchGenre","toLowerCase","includes","slice","map","genre"],"sources":["/Users/ivanmerkulov/Documents/GitHub/2109415-what-to-watch-3/frontend/src/components/genres-list/genres-list.tsx"],"sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { useAppSelector, useAppDispatch } from '../../hooks/';\nimport { setActiveGenre } from '../../store/genre-data/genre-data';\nimport { getActiveGenre } from '../../store/genre-data/selectors';\nimport { DEFAULT_GENRE, GENRES } from '../../const';\nimport { capitalize } from '../../util';\n\nfunction GenresList() {\n  const dispatch = useAppDispatch();\n  const activeGenre = useAppSelector(getActiveGenre);\n  const genres = useMemo(() => [DEFAULT_GENRE, ...GENRES], []);\n  const [searchParams] = useSearchParams();\n  const searchGenre = searchParams.get('genre');\n\n  useEffect(() => {\n    const loweredSearchGenre = searchGenre?.toLowerCase();\n\n    if (loweredSearchGenre === activeGenre.toLowerCase()) {\n      return;\n    }\n\n    if (loweredSearchGenre && genres.includes(loweredSearchGenre)) {\n      dispatch(setActiveGenre(loweredSearchGenre));\n      return;\n    }\n\n    dispatch(setActiveGenre(DEFAULT_GENRE));\n  }, [searchGenre, dispatch, genres, activeGenre]);\n\n  return (\n    <ul className=\"catalog__genres-list\">\n      {genres.slice(0, 10).map((genre) => (\n        <li\n          key={genre}\n          className={cn('catalog__genres-item', {\n            'catalog__genres-item--active': genre === activeGenre,\n          })}\n        >\n          <Link to={`?genre=${genre}`} className=\"catalog__genres-link\">\n            {capitalize(genre)}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default GenresList;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC1C,SAASC,IAAI,EAAEC,eAAe,QAAQ,kBAAkB;AACxD,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,cAAc,EAAEC,cAAc,QAAQ,cAAc;AAC7D,SAASC,cAAc,QAAQ,mCAAmC;AAClE,SAASC,cAAc,QAAQ,kCAAkC;AACjE,SAASC,aAAa,EAAEC,MAAM,QAAQ,aAAa;AACnD,SAASC,UAAU,QAAQ,YAAY;AAAC;AAExC,SAASC,UAAU,GAAG;EAAA;EACpB,MAAMC,QAAQ,GAAGP,cAAc,EAAE;EACjC,MAAMQ,WAAW,GAAGT,cAAc,CAACG,cAAc,CAAC;EAClD,MAAMO,MAAM,GAAGd,OAAO,CAAC,MAAM,CAACQ,aAAa,EAAE,GAAGC,MAAM,CAAC,EAAE,EAAE,CAAC;EAC5D,MAAM,CAACM,YAAY,CAAC,GAAGb,eAAe,EAAE;EACxC,MAAMc,WAAW,GAAGD,YAAY,CAACE,GAAG,CAAC,OAAO,CAAC;EAE7ClB,SAAS,CAAC,MAAM;IACd,MAAMmB,kBAAkB,GAAGF,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEG,WAAW,EAAE;IAErD,IAAID,kBAAkB,KAAKL,WAAW,CAACM,WAAW,EAAE,EAAE;MACpD;IACF;IAEA,IAAID,kBAAkB,IAAIJ,MAAM,CAACM,QAAQ,CAACF,kBAAkB,CAAC,EAAE;MAC7DN,QAAQ,CAACN,cAAc,CAACY,kBAAkB,CAAC,CAAC;MAC5C;IACF;IAEAN,QAAQ,CAACN,cAAc,CAACE,aAAa,CAAC,CAAC;EACzC,CAAC,EAAE,CAACQ,WAAW,EAAEJ,QAAQ,EAAEE,MAAM,EAAED,WAAW,CAAC,CAAC;EAEhD,oBACE;IAAI,SAAS,EAAC,sBAAsB;IAAA,UACjCC,MAAM,CAACO,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,GAAG,CAAEC,KAAK,iBAC7B;MAEE,SAAS,EAAEpB,EAAE,CAAC,sBAAsB,EAAE;QACpC,8BAA8B,EAAEoB,KAAK,KAAKV;MAC5C,CAAC,CAAE;MAAA,uBAEH,QAAC,IAAI;QAAC,EAAE,EAAG,UAASU,KAAM,EAAE;QAAC,SAAS,EAAC,sBAAsB;QAAA,UAC1Db,UAAU,CAACa,KAAK;MAAC;QAAA;QAAA;QAAA;MAAA;IACb,GAPFA,KAAK;MAAA;MAAA;MAAA;IAAA,QASb;EAAC;IAAA;IAAA;IAAA;EAAA,QACC;AAET;AAAC,GAtCQZ,UAAU;EAAA,QACAN,cAAc,EACXD,cAAc,EAEXF,eAAe;AAAA;AAAA,KAJ/BS,UAAU;AAwCnB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}