{"ast":null,"code":"var _jsxFileName = \"/Users/ivanmerkulov/Documents/GitHub/2109415-what-to-watch-3/frontend/src/components/private-route/private-route.tsx\",\n  _s = $RefreshSig$();\nimport { Navigate } from 'react-router-dom';\nimport { useAppSelector } from '../../hooks/';\nimport { AppRoute } from '../../const';\nimport { getIsAuth, getIsUnknown } from '../../store/user-data/selectors';\nimport Spinner from '../spinner/spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PrivateRoute(props) {\n  _s();\n  const {\n    children\n  } = props;\n  const isAuth = useAppSelector(getIsAuth);\n  const isUnknown = useAppSelector(getIsUnknown);\n  if (isAuth) {\n    return children;\n  }\n  if (isUnknown) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: AppRoute.Login\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n}\n_s(PrivateRoute, \"tiwZVqxmjEL8PmYb9W5VCmKi5/M=\", false, function () {\n  return [useAppSelector, useAppSelector];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["Navigate","useAppSelector","AppRoute","getIsAuth","getIsUnknown","Spinner","PrivateRoute","props","children","isAuth","isUnknown","Login"],"sources":["/Users/ivanmerkulov/Documents/GitHub/2109415-what-to-watch-3/frontend/src/components/private-route/private-route.tsx"],"sourcesContent":["import { Navigate } from 'react-router-dom';\nimport { useAppSelector } from '../../hooks/';\nimport { AppRoute } from '../../const';\nimport { getIsAuth, getIsUnknown } from '../../store/user-data/selectors';\nimport Spinner from '../spinner/spinner';\n\ntype PrivateRouteProps = {\n  children: JSX.Element;\n};\n\nfunction PrivateRoute(props: PrivateRouteProps): JSX.Element {\n  const { children } = props;\n  const isAuth = useAppSelector(getIsAuth);\n  const isUnknown = useAppSelector(getIsUnknown);\n\n  if (isAuth) {\n    return children;\n  }\n\n  if (isUnknown) {\n    return <Spinner />;\n  }\n\n  return <Navigate to={AppRoute.Login} />;\n}\n\nexport default PrivateRoute;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,cAAc,QAAQ,cAAc;AAC7C,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,SAAS,EAAEC,YAAY,QAAQ,iCAAiC;AACzE,OAAOC,OAAO,MAAM,oBAAoB;AAAC;AAMzC,SAASC,YAAY,CAACC,KAAwB,EAAe;EAAA;EAC3D,MAAM;IAAEC;EAAS,CAAC,GAAGD,KAAK;EAC1B,MAAME,MAAM,GAAGR,cAAc,CAACE,SAAS,CAAC;EACxC,MAAMO,SAAS,GAAGT,cAAc,CAACG,YAAY,CAAC;EAE9C,IAAIK,MAAM,EAAE;IACV,OAAOD,QAAQ;EACjB;EAEA,IAAIE,SAAS,EAAE;IACb,oBAAO,QAAC,OAAO;MAAA;MAAA;MAAA;IAAA,QAAG;EACpB;EAEA,oBAAO,QAAC,QAAQ;IAAC,EAAE,EAAER,QAAQ,CAACS;EAAM;IAAA;IAAA;IAAA;EAAA,QAAG;AACzC;AAAC,GAdQL,YAAY;EAAA,QAEJL,cAAc,EACXA,cAAc;AAAA;AAAA,KAHzBK,YAAY;AAgBrB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}