{"ast":null,"code":"var _jsxFileName = \"/Users/ivanmerkulov/Documents/GitHub/2109415-what-to-watch-3/frontend/src/pages/add-film-page/add-film-page.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport Logo from '../../components/logo/logo';\nimport UserBlock from '../../components/user-block/user-block';\nimport Footer from '../../components/footer/footer';\nimport AddFilmForm from '../../components/add-film-form/add-film-form';\nimport { GENRES, AppRoute } from '../../const';\nimport { addFilm } from '../../store/api-actions';\nimport { getActiveFilm } from '../../store/film-data/selectors';\nimport { useAppDispatch, useAppSelector } from '../../hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emptyFilm = {\n  name: '',\n  posterImage: '',\n  backgroundImage: '',\n  backgroundColor: '',\n  videoLink: '',\n  previewVideoLink: '',\n  description: '',\n  director: '',\n  starring: [],\n  runTime: 0,\n  genre: GENRES[0],\n  released: 0\n};\nfunction AddFilmPage() {\n  _s();\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const activeFilm = useAppSelector(getActiveFilm);\n  const handleSubmit = useCallback(async filmData => {\n    const response = await dispatch(addFilm(filmData));\n    if (response.meta.requestStatus === 'rejected') {\n      toast.error('Can\\'t add film');\n    } else if (activeFilm) {\n      navigate(`${AppRoute.Film}/${activeFilm.id}`);\n    }\n  }, [activeFilm, dispatch, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"page-header user-page__head\",\n      children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"page-title user-page__title\",\n        children: \"Add film\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserBlock, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sign-in user-page__content\",\n      children: /*#__PURE__*/_jsxDEV(AddFilmForm, {\n        film: emptyFilm,\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(AddFilmPage, \"6wOl75sHtyM4L090kRn6TamRXtM=\", false, function () {\n  return [useAppDispatch, useNavigate, useAppSelector];\n});\n_c = AddFilmPage;\nexport default AddFilmPage;\nvar _c;\n$RefreshReg$(_c, \"AddFilmPage\");","map":{"version":3,"names":["useCallback","useNavigate","toast","Logo","UserBlock","Footer","AddFilmForm","GENRES","AppRoute","addFilm","getActiveFilm","useAppDispatch","useAppSelector","emptyFilm","name","posterImage","backgroundImage","backgroundColor","videoLink","previewVideoLink","description","director","starring","runTime","genre","released","AddFilmPage","dispatch","navigate","activeFilm","handleSubmit","filmData","response","meta","requestStatus","error","Film","id"],"sources":["/Users/ivanmerkulov/Documents/GitHub/2109415-what-to-watch-3/frontend/src/pages/add-film-page/add-film-page.tsx"],"sourcesContent":["import { useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport Logo from '../../components/logo/logo';\nimport UserBlock from '../../components/user-block/user-block';\nimport Footer from '../../components/footer/footer';\nimport AddFilmForm from '../../components/add-film-form/add-film-form';\nimport { NewFilm } from '../../types/new-film';\nimport { GENRES, AppRoute } from '../../const';\nimport { addFilm } from '../../store/api-actions';\nimport { getActiveFilm } from '../../store/film-data/selectors';\nimport { useAppDispatch, useAppSelector } from '../../hooks';\n\nconst emptyFilm: NewFilm = {\n  name: '',\n  posterImage: '',\n  backgroundImage: '',\n  backgroundColor: '',\n  videoLink: '',\n  previewVideoLink: '',\n  description: '',\n  director: '',\n  starring: [],\n  runTime: 0,\n  genre: GENRES[0],\n  released: 0,\n};\n\nfunction AddFilmPage() {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const activeFilm = useAppSelector(getActiveFilm);\n\n  const handleSubmit = useCallback(\n    async (filmData: NewFilm) => {\n      const response = await dispatch(addFilm(filmData));\n      if (response.meta.requestStatus === 'rejected') {\n        toast.error('Can\\'t add film');\n      } else if (activeFilm) {\n        navigate(`${AppRoute.Film}/${activeFilm.id}`);\n      }\n    },\n    [activeFilm, dispatch, navigate]\n  );\n\n  return (\n    <div className=\"user-page\">\n      <header className=\"page-header user-page__head\">\n        <Logo />\n        <h1 className=\"page-title user-page__title\">Add film</h1>\n        <UserBlock />\n      </header>\n      <div className=\"sign-in user-page__content\">\n        <AddFilmForm film={emptyFilm} onSubmit={handleSubmit} />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default AddFilmPage;\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,IAAI,MAAM,4BAA4B;AAC7C,OAAOC,SAAS,MAAM,wCAAwC;AAC9D,OAAOC,MAAM,MAAM,gCAAgC;AACnD,OAAOC,WAAW,MAAM,8CAA8C;AAEtE,SAASC,MAAM,EAAEC,QAAQ,QAAQ,aAAa;AAC9C,SAASC,OAAO,QAAQ,yBAAyB;AACjD,SAASC,aAAa,QAAQ,iCAAiC;AAC/D,SAASC,cAAc,EAAEC,cAAc,QAAQ,aAAa;AAAC;AAE7D,MAAMC,SAAkB,GAAG;EACzBC,IAAI,EAAE,EAAE;EACRC,WAAW,EAAE,EAAE;EACfC,eAAe,EAAE,EAAE;EACnBC,eAAe,EAAE,EAAE;EACnBC,SAAS,EAAE,EAAE;EACbC,gBAAgB,EAAE,EAAE;EACpBC,WAAW,EAAE,EAAE;EACfC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE,CAAC;EACVC,KAAK,EAAEjB,MAAM,CAAC,CAAC,CAAC;EAChBkB,QAAQ,EAAE;AACZ,CAAC;AAED,SAASC,WAAW,GAAG;EAAA;EACrB,MAAMC,QAAQ,GAAGhB,cAAc,EAAE;EACjC,MAAMiB,QAAQ,GAAG3B,WAAW,EAAE;EAC9B,MAAM4B,UAAU,GAAGjB,cAAc,CAACF,aAAa,CAAC;EAEhD,MAAMoB,YAAY,GAAG9B,WAAW,CAC9B,MAAO+B,QAAiB,IAAK;IAC3B,MAAMC,QAAQ,GAAG,MAAML,QAAQ,CAAClB,OAAO,CAACsB,QAAQ,CAAC,CAAC;IAClD,IAAIC,QAAQ,CAACC,IAAI,CAACC,aAAa,KAAK,UAAU,EAAE;MAC9ChC,KAAK,CAACiC,KAAK,CAAC,iBAAiB,CAAC;IAChC,CAAC,MAAM,IAAIN,UAAU,EAAE;MACrBD,QAAQ,CAAE,GAAEpB,QAAQ,CAAC4B,IAAK,IAAGP,UAAU,CAACQ,EAAG,EAAC,CAAC;IAC/C;EACF,CAAC,EACD,CAACR,UAAU,EAAEF,QAAQ,EAAEC,QAAQ,CAAC,CACjC;EAED,oBACE;IAAK,SAAS,EAAC,WAAW;IAAA,wBACxB;MAAQ,SAAS,EAAC,6BAA6B;MAAA,wBAC7C,QAAC,IAAI;QAAA;QAAA;QAAA;MAAA,QAAG,eACR;QAAI,SAAS,EAAC,6BAA6B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAc,eACzD,QAAC,SAAS;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACN,eACT;MAAK,SAAS,EAAC,4BAA4B;MAAA,uBACzC,QAAC,WAAW;QAAC,IAAI,EAAEf,SAAU;QAAC,QAAQ,EAAEiB;MAAa;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QACpD,eACN,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACN;AAEV;AAAC,GA9BQJ,WAAW;EAAA,QACDf,cAAc,EACdV,WAAW,EACTW,cAAc;AAAA;AAAA,KAH1Bc,WAAW;AAgCpB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}