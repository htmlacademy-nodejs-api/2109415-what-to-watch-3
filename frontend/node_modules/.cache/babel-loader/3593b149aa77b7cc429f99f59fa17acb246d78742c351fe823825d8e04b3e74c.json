{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { NameSpace, DEFAULT_GENRE } from '../../const';\nimport { addFilm, deleteFilm, editFilm, fetchFilmsByGenre } from '../api-actions';\nconst initialState = {\n  activeGenre: DEFAULT_GENRE,\n  filmsByGenre: [],\n  isLoading: false\n};\nexport const genreData = createSlice({\n  name: NameSpace.Genre,\n  initialState,\n  reducers: {\n    setActiveGenre: (state, action) => {\n      state.activeGenre = action.payload;\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchFilmsByGenre.pending, state => {\n      state.isLoading = true;\n    }).addCase(fetchFilmsByGenre.fulfilled, (state, action) => {\n      state.filmsByGenre = action.payload;\n      state.isLoading = false;\n    }).addCase(fetchFilmsByGenre.rejected, state => {\n      state.isLoading = false;\n    }).addCase(addFilm.fulfilled, (state, action) => {\n      const newFilm = action.payload;\n      if (newFilm.genre === state.activeGenre) {\n        state.filmsByGenre.push(newFilm);\n      }\n    }).addCase(editFilm.fulfilled, (state, action) => {\n      const updatedFilm = action.payload;\n      if (updatedFilm.genre === state.activeGenre) {\n        state.filmsByGenre = state.filmsByGenre.map(film => film.id === updatedFilm.id ? updatedFilm : film);\n      }\n    }).addCase(deleteFilm.fulfilled, (state, action) => {\n      const deletedFilm = action.payload;\n      if (deletedFilm.genre === state.activeGenre) {\n        state.filmsByGenre = state.filmsByGenre.filter(film => film.id !== deletedFilm.id);\n      }\n    });\n  }\n});\nexport const {\n  setActiveGenre\n} = genreData.actions;","map":{"version":3,"names":["createSlice","NameSpace","DEFAULT_GENRE","addFilm","deleteFilm","editFilm","fetchFilmsByGenre","initialState","activeGenre","filmsByGenre","isLoading","genreData","name","Genre","reducers","setActiveGenre","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","newFilm","genre","push","updatedFilm","map","film","id","deletedFilm","filter","actions"],"sources":["/Users/ivanmerkulov/Documents/GitHub/2109415-what-to-watch-3/frontend/src/store/genre-data/genre-data.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { NameSpace, DEFAULT_GENRE } from '../../const';\nimport { GenreState } from '../../types/state';\nimport {\n  addFilm,\n  deleteFilm,\n  editFilm,\n  fetchFilmsByGenre,\n} from '../api-actions';\n\nconst initialState: GenreState = {\n  activeGenre: DEFAULT_GENRE,\n  filmsByGenre: [],\n  isLoading: false,\n};\n\nexport const genreData = createSlice({\n  name: NameSpace.Genre,\n  initialState,\n  reducers: {\n    setActiveGenre: (state, action) => {\n      state.activeGenre = action.payload;\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchFilmsByGenre.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(fetchFilmsByGenre.fulfilled, (state, action) => {\n        state.filmsByGenre = action.payload;\n        state.isLoading = false;\n      })\n      .addCase(fetchFilmsByGenre.rejected, (state) => {\n        state.isLoading = false;\n      })\n      .addCase(addFilm.fulfilled, (state, action) => {\n        const newFilm = action.payload;\n        if (newFilm.genre === state.activeGenre) {\n          state.filmsByGenre.push(newFilm);\n        }\n      })\n      .addCase(editFilm.fulfilled, (state, action) => {\n        const updatedFilm = action.payload;\n        if (updatedFilm.genre === state.activeGenre) {\n          state.filmsByGenre = state.filmsByGenre.map((film) =>\n            film.id === updatedFilm.id ? updatedFilm : film\n          );\n        }\n      })\n      .addCase(deleteFilm.fulfilled, (state, action) => {\n        const deletedFilm = action.payload;\n        if (deletedFilm.genre === state.activeGenre) {\n          state.filmsByGenre = state.filmsByGenre.filter(\n            (film) => film.id !== deletedFilm.id\n          );\n        }\n      });\n  },\n});\n\nexport const { setActiveGenre } = genreData.actions;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,EAAEC,aAAa,QAAQ,aAAa;AAEtD,SACEC,OAAO,EACPC,UAAU,EACVC,QAAQ,EACRC,iBAAiB,QACZ,gBAAgB;AAEvB,MAAMC,YAAwB,GAAG;EAC/BC,WAAW,EAAEN,aAAa;EAC1BO,YAAY,EAAE,EAAE;EAChBC,SAAS,EAAE;AACb,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGX,WAAW,CAAC;EACnCY,IAAI,EAAEX,SAAS,CAACY,KAAK;EACrBN,YAAY;EACZO,QAAQ,EAAE;IACRC,cAAc,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjCD,KAAK,CAACR,WAAW,GAAGS,MAAM,CAACC,OAAO;IACpC;EACF,CAAC;EACDC,aAAa,CAACC,OAAO,EAAE;IACrBA,OAAO,CACJC,OAAO,CAACf,iBAAiB,CAACgB,OAAO,EAAGN,KAAK,IAAK;MAC7CA,KAAK,CAACN,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDW,OAAO,CAACf,iBAAiB,CAACiB,SAAS,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MACvDD,KAAK,CAACP,YAAY,GAAGQ,MAAM,CAACC,OAAO;MACnCF,KAAK,CAACN,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC,CACDW,OAAO,CAACf,iBAAiB,CAACkB,QAAQ,EAAGR,KAAK,IAAK;MAC9CA,KAAK,CAACN,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC,CACDW,OAAO,CAAClB,OAAO,CAACoB,SAAS,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MAC7C,MAAMQ,OAAO,GAAGR,MAAM,CAACC,OAAO;MAC9B,IAAIO,OAAO,CAACC,KAAK,KAAKV,KAAK,CAACR,WAAW,EAAE;QACvCQ,KAAK,CAACP,YAAY,CAACkB,IAAI,CAACF,OAAO,CAAC;MAClC;IACF,CAAC,CAAC,CACDJ,OAAO,CAAChB,QAAQ,CAACkB,SAAS,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MAC9C,MAAMW,WAAW,GAAGX,MAAM,CAACC,OAAO;MAClC,IAAIU,WAAW,CAACF,KAAK,KAAKV,KAAK,CAACR,WAAW,EAAE;QAC3CQ,KAAK,CAACP,YAAY,GAAGO,KAAK,CAACP,YAAY,CAACoB,GAAG,CAAEC,IAAI,IAC/CA,IAAI,CAACC,EAAE,KAAKH,WAAW,CAACG,EAAE,GAAGH,WAAW,GAAGE,IAAI,CAChD;MACH;IACF,CAAC,CAAC,CACDT,OAAO,CAACjB,UAAU,CAACmB,SAAS,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MAChD,MAAMe,WAAW,GAAGf,MAAM,CAACC,OAAO;MAClC,IAAIc,WAAW,CAACN,KAAK,KAAKV,KAAK,CAACR,WAAW,EAAE;QAC3CQ,KAAK,CAACP,YAAY,GAAGO,KAAK,CAACP,YAAY,CAACwB,MAAM,CAC3CH,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKC,WAAW,CAACD,EAAE,CACrC;MACH;IACF,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEhB;AAAe,CAAC,GAAGJ,SAAS,CAACuB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}